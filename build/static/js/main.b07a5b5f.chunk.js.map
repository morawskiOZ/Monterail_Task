{"version":3,"sources":["components/MainForm/FormInput/DateComponent/DateComponent.tsx","helpers/components/MainForm/timeConvertor.ts","components/MainForm/FormInput/DateComponent/TimeInput/TimeInput.tsx","ts/FormInput/FormInput_enum.ts","helpers/components/MainForm/formValidators.ts","helpers/components/MainForm/assignValidator.ts","components/MainForm/FormBlock/FormBlock.tsx","helpers/components/MainForm/assignClassName.ts","helpers/components/MainForm/translateName.ts","helpers/components/MainForm/assignElement.tsx","helpers/components/MainForm/modifyValue.ts","helpers/components/MainForm/inputParser.ts","components/MainForm/FormInput/FormInput.tsx","helpers/components/MainForm/generateExtraFields.tsx","components/MainForm/MainForm.tsx","components/Header/Header.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["TimeFormat","timeConvertor","time","format","_time$split","split","_time$split2","Object","slicedToArray","hours","minutes","AM","parseFloat","concat","TimeInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_input","lastVal","input","state","initTime","_this2","disabled","mountFocus","setTimeout","focus","_this3","nextProps","onChangeHandler","val","_val$split","_val$split2","hoursStr","minutesStr","test","hour","Number","isInteger","isNaN","isValidMinutes","valArr","indexOf","length","parseInt","isValid","slice","setState","onTimeChange","type","e","target","select","_this4","react_default","a","createElement","assign","name","undefined","className","getType","placeholder","value","onChange","onFocus","onFocusHandler","ref","c","Component","InputNames","InputTypes","DateComponent","_ref","_ref$meta","meta","error","active","touched","label","_useState","useState","_useState2","day","setDay","_useState3","_useState4","setTime","_useState5","_useState6","setFormat","handleFormatChange","_ref3","_ref2","date","DateComponent_TimeInput_TimeInput","checked","required","PM","allRequired","notRequiredNumber","composeValidators","_len","arguments","validators","Array","_key","reduce","validator","checkDate","inputDateFormated","Date","transformDate","validateEmail","email","assignValidators","values","AllowedLength","TITLE","push","DESCRIPTION","DATE","COORDINATOR_ID","EVENT_FEE","paid_event","COORDINATOR_EMAIL","coordinator","DURATION","REWARD","FormBlock","children","title","assignClassName","classNames","defaultClassName","CATEGORY_ID","valueFromTranslatedName","translatedName","prev","curr","getStateFromTranslatedName","translateNameToState","PAID_EVENT","join","assignElement","options","elements","condition","information","plural","hidden","map","option","id","key","_separateLoggedInUser","find","filter","separateLoggedInUser","_separateLoggedInUser2","userOption","restOption","lastname","element","index","Fragment","modifiedValue","modifyValue","parseInput","FormInput","esm_extends","description","counter","maxLength","multiElement","multiFields","form","defaultValue","react_final_form_es","validate","apply","toConsumableArray","parse","inputToRender","extraFields","fieldProps","useEffect","change","generateExtraFields","MainForm","submitted","setSubmitted","MainForm_FormBlock_FormBlock","mutators","resetFee","args","utils","changeValue","onSubmit","valuesOmitNil","newValues","omitNill","console","log","render","handleSubmit","submitting","pristine","inputsSchema","MainForm_FormInput_FormInput","component","onClick","reset","Header","App","components_Header_Header","components_MainForm_MainForm","Boolean","window","location","hostname","match","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b07a5b5f.chunk.js","sourcesContent":["import { timeConvertor } from \"helpers/components/MainForm/timeConvertor\"\nimport React, { ReactElement, useState } from \"react\"\nimport TimeInput from \"./TimeInput/TimeInput\"\n\n// TODO: add types everywhere\n// TODO: make this component more generic, accepting styles from outside for example, more generic props\n\nexport enum TimeFormat {\n  AM = \"AM\",\n  PM = \"PM\"\n}\n\nexport const transformDate = (date: string): Date => new Date(date + \":00Z\")\n\nexport const DateComponent = ({\n  input,\n  meta: { active, error, touched },\n  label\n}: any): ReactElement => {\n  const [day, setDay] = useState<string>(\"\")\n  const [time, setTime] = useState<string>(\"\")\n  const [format, setFormat] = useState<TimeFormat>(TimeFormat.AM)\n\n  const handleDateChange = ({ target: { value } }) => {\n    setDay(value)\n    if (time) {\n      const date = `${value}T${timeConvertor(time, format)}`\n      input.onChange(date)\n    }\n  }\n  const handleTimeChange = value => {\n    setTime(value)\n    if (day) {\n      const date = `${day}T${timeConvertor(value, format)}`\n      input.onChange(date)\n    }\n  }\n  const handleFormatChange = ({ target: { value } }) => {\n    setFormat(value)\n    if (day && time) {\n      input.onChange(`${day}T${timeConvertor(time, value)}`)\n    }\n  }\n\n  return (\n    <div className=\"FormInput\">\n      <label className=\"FormInput--firstColumn FormInput-label\">\n        {label} <span className=\"FormInput--required\">&nbsp;*</span>\n      </label>\n\n      <div className=\"FormInput--secondColumn\">\n        <div\n          className={`FormInput-multiElementRow FormInput-multiElementRow--veryLong FormInput-multiElementRow--bigger ${\n            error && touched ? \"FormInput-input--error\" : \"\"\n          }`}\n        >\n          <input\n            {...input}\n            type=\"date\"\n            onChange={handleDateChange}\n            value={day}\n            className={`FormInput-input FormInput-input--date ${\n              day ? \"\" : \"FormInput-input--placeholder\"\n            }`}\n          />\n          <span className=\"FormInput-description\">at</span>\n          <TimeInput\n            onTimeChange={handleTimeChange}\n            placeholder={\"--:--\"}\n            input={input}\n            className={\"FormInput-input FormInput-input--verySmall\"}\n          />\n          <input\n            {...input}\n            type=\"radio\"\n            name=\"format\"\n            value={TimeFormat.AM}\n            checked={format === TimeFormat.AM}\n            onChange={handleFormatChange}\n            required\n            className=\"FormInput-input FormInput-input--radio\"\n          />\n          <span className=\"FormInput-description\"> AM </span>\n          <input\n            {...input}\n            type=\"radio\"\n            name=\"format\"\n            value={TimeFormat.PM}\n            checked={format === TimeFormat.PM}\n            onChange={handleFormatChange}\n            className=\"FormInput-input FormInput-input--radio\"\n          />\n          <span className=\"FormInput-description\"> PM</span>\n        </div>\n      </div>\n      <div className=\"FormInput--thirdColumn\">\n        {error && touched && (\n          <div className=\"FormInput-error FormInput-error--arrow\">{error}</div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import { TimeFormat } from \"components/MainForm/FormInput/DateComponent/DateComponent\"\n\nexport const timeConvertor = (time: string, format: TimeFormat) => {\n  const [hours, minutes] = time.split(\":\")\n\n  if (format === TimeFormat.AM) {\n    if (parseFloat(hours) === 12) {\n      return `00:${minutes}`\n    } else {\n      return time\n    }\n  } else {\n    if (parseFloat(hours) === 12) {\n      return time\n    } else {\n      return `${parseFloat(hours) + 12}:${minutes}`\n    }\n  }\n}\n","// copied and modified from https://github.com/dima-bu/react-time-input/blob/HEAD/src/timeInput.jsx\n\n// TODO: props and state types\n\nimport React, { Component } from \"react\"\n\nclass TimeInput extends Component<any, any> {\n  _input: any\n  lastVal: string\n  input: any\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      time: this.props.initTime || \"\"\n    }\n    this.lastVal = \"\"\n  }\n\n  componentDidMount() {\n    if (!this.props.disabled && this.props.mountFocus) {\n      setTimeout(() => {\n        this._input.focus()\n      }, 0)\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.mountFocus) {\n      setTimeout(() => {\n        this._input.focus()\n      }, 0)\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.initTime) {\n      this.onChangeHandler(nextProps.initTime)\n    }\n  }\n\n  isValid(val) {\n    const regexp = /^\\d{0,2}?:?\\d{0,2}$/\n\n    const [hoursStr, minutesStr] = val.split(\":\")\n\n    if (!regexp.test(val)) {\n      return false\n    }\n\n    const hours = Number(hoursStr)\n    const minutes = Number(minutesStr)\n\n    const isValidHour = hour => Number.isInteger(hour) && hour >= 0 && hour < 13\n    const isValidMinutes = minutes =>\n      (Number.isInteger(minutes) && hours >= 0 && hours < 13) ||\n      Number.isNaN(minutes)\n    if (!isValidHour(hours) || !isValidMinutes(minutes)) {\n      return false\n    }\n\n    if (minutes < 10 && Number(minutesStr[0]) > 5) {\n      return false\n    }\n\n    const valArr = val.indexOf(\":\") !== -1 ? val.split(\":\") : [val]\n\n    // check mm and HH\n    if (\n      valArr[0] &&\n      valArr[0].length &&\n      (parseInt(valArr[0], 10) < 0 || parseInt(valArr[0], 10) > 13)\n    ) {\n      return false\n    }\n\n    if (\n      valArr[1] &&\n      valArr[1].length &&\n      (parseInt(valArr[1], 10) < 0 || parseInt(valArr[1], 10) > 59)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  onChangeHandler(val) {\n    if (val === this.state.time) {\n      return\n    }\n    if (this.isValid(val)) {\n      if (\n        val.length === 2 &&\n        this.lastVal.length !== 3 &&\n        val.indexOf(\":\") === -1\n      ) {\n        val = val + \":\"\n      }\n\n      if (val.length === 2 && this.lastVal.length === 3) {\n        val = val.slice(0, 1)\n      }\n\n      if (val.length > 5) {\n        return false\n      }\n\n      this.lastVal = val\n\n      this.setState({\n        time: val\n      })\n\n      if (val.length === 5) {\n        this.props.onTimeChange(val)\n      }\n    }\n  }\n\n  getType() {\n    if (this.props.type) {\n      return this.props.type\n    }\n    return \"tel\"\n  }\n\n  onFocusHandler(e) {\n    e.target.select()\n  }\n\n  render() {\n    return (\n      <input\n        {...this.props.input}\n        name={this.props.name ? this.props.name : undefined}\n        className={this.props.className}\n        type={this.getType()}\n        disabled={this.props.disabled}\n        placeholder={this.props.placeholder}\n        value={this.state.time}\n        onChange={e => this.onChangeHandler(e.target.value)}\n        onFocus={this.onFocusHandler}\n        ref={c => (this._input = c)}\n      />\n    )\n  }\n}\n\nexport default TimeInput\n","export enum InputNames {\n  TITLE = \"title\",\n  EVENT_FEE = \"event_fee\",\n  PAID_EVENT = \"paid_event\",\n  DESCRIPTION = \"description\",\n  CATEGORY_ID = \"category_id\",\n  COORDINATOR_EMAIL = \"coordinator.email\",\n  COORDINATOR_ID = \"coordinator.id\",\n  DURATION = \"duration\",\n  DATE = \"date\",\n  REWARD = \"reward\"\n}\nexport enum InputTypes {\n  TEXT = \"text\",\n  RADIO = \"radio\",\n  NUMBER = \"number\",\n  EMAIL = \"email\",\n  DATE = \"date\"\n\n}","import { transformDate } from \"components/MainForm/FormInput/DateComponent/DateComponent\"\n\nexport const required = value => (value ? undefined : \"Field Required\")\nexport const allRequired = value =>\n  value ? undefined : \"All time and date fields required\"\n\nexport const mustBeNumber = value => {\n  if (isNaN(value)) {\n    return \"Must be a number\"\n  } else {\n    return undefined\n  }\n}\n\nexport const requiredNumber = value => {\n  if (value) {\n    if (isNaN(value)) {\n      return \"Must be a number\"\n    } else {\n      return undefined\n    }\n  } else {\n    return \"Field Required\"\n  }\n}\nexport const notRequiredNumber = value => {\n  if (value) {\n    if (isNaN(value)) {\n      return \"Must be a number\"\n    } else {\n      return undefined\n    }\n  }\n}\n\nexport const minValue = min => value =>\n  isNaN(value) || value >= min ? undefined : `Should be greater than ${min}`\n\nexport const composeValidators = (...validators) => value =>\n  validators.reduce((error, validator) => error || validator(value), undefined)\n\nexport const checkLength = (AllowedLength: number) => value => {\n  return value.length < AllowedLength\n    ? undefined\n    : `Description cannot be longer than ${AllowedLength} characters`\n}\n\nexport const checkDate = (value: string) => {\n  const inputDateFormated: Date = transformDate(value)\n  const date = new Date()\n  return date < inputDateFormated\n    ? undefined\n    : `You cannot pick the date in the past`\n}\n\nexport const validateEmail = (email: string) => {\n  // RFC2822 email validator\n  const reg = /[a-z0-9!#$%&'*+=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g\n  const test = reg.test(email)\n  return test ? undefined : \"E-mail is not in a valid format\"\n}\n","import {\n  required,\n  checkLength,\n  checkDate,\n  allRequired,\n  validateEmail,\n  notRequiredNumber\n} from \"./formValidators\"\nimport { FieldValidator } from \"final-form\"\nimport { InputNames } from \"ts/FormInput/FormInput_enum\"\nimport { FormValues } from \"ts/Form/Form_interfaces\"\n\n// TODO: add values types\nexport const assignValidators = (\n  name: InputNames,\n  values: FormValues\n): FieldValidator<any>[] => {\n  const validators: FieldValidator<any>[] = []\n  switch (name) {\n    case InputNames.TITLE:\n      validators.push(required as never)\n      break\n    case InputNames.DESCRIPTION:\n      validators.push(required as never)\n      validators.push(checkLength(141) as never)\n      break\n    case InputNames.DATE:\n      validators.push(allRequired as never)\n      validators.push(checkDate as never)\n      break\n    case InputNames.COORDINATOR_ID:\n      validators.push(required as never)\n      break\n    case InputNames.EVENT_FEE:\n        validators.push(notRequiredNumber as never)\n      if (values.paid_event) {\n        validators.push(required as never)\n      }\n      break\n    case InputNames.COORDINATOR_EMAIL:\n      values.coordinator &&\n        values.coordinator.email &&\n        validators.push(validateEmail as never)\n      break\n    case InputNames.DURATION:\n    case InputNames.REWARD:\n      validators.push(notRequiredNumber as never)\n      break\n  }\n  return validators\n}\n","import React, { ReactElement } from \"react\"\nimport \"./FormBlock.scss\"\n\nconst FormBlock = ({\n  children,\n  title,\n  className\n}: {\n  children: any\n  title: string\n  className?: string\n}): ReactElement => {\n  return (\n    <div className={`FormBlock ${className ? className : \"\"}`}>\n      <h4 className=\"FormBlock-title\">\n        {title}\n        <div className=\"FormBlock-line\" />\n      </h4>\n\n      {children}\n    </div>\n  )\n}\n\nexport default FormBlock\n","import { InputNames } from \"ts/FormInput/FormInput_enum\"\nimport {\n  translateNameToState,\n  getStateFromTranslatedName\n} from \"./translateName\"\n\nexport const assignClassName = (name: InputNames, values?: any, meta?: any): string => {\n  const defaultClassName = \"FormInput-input\"\n  const classNames: string[] = [defaultClassName]\n  meta && meta.error && meta.touched && classNames.push(defaultClassName + \"--error\")\n  switch (name) {\n    case InputNames.DESCRIPTION:\n      classNames.push(defaultClassName + \"--textarea\")\n      break\n    case InputNames.CATEGORY_ID:\n    case InputNames.COORDINATOR_ID:\n      const translatedName = translateNameToState(name)\n      const valueFromTranslatedName = getStateFromTranslatedName(\n        translatedName,\n        values\n      )\n\n      classNames.push(defaultClassName + \"--select\")\n\n      if (values && !valueFromTranslatedName) {\n        classNames.push(defaultClassName + \"--placeholder\")\n      }\n      break\n    case InputNames.PAID_EVENT:\n      classNames.push(defaultClassName + \"--radio\")\n      break\n    case InputNames.DURATION:\n    case InputNames.REWARD:\n    case InputNames.EVENT_FEE:\n      classNames.push(defaultClassName + \"--small\")\n      break\n  }\n  return classNames.join(\" \")\n}\n","import { InputNames } from \"ts/FormInput/FormInput_enum\"\n\nexport const translateNameToState = (name: InputNames) => {\n  switch (name) {\n    case InputNames.COORDINATOR_ID:\n      return [\"coordinator\", \"id\"]\n    case InputNames.COORDINATOR_EMAIL:\n      return [\"coordinator\", \"email\"]\n    default:\n      return [name]\n  }\n}\n\nexport const getStateFromTranslatedName = (\n  translatedName: string[],\n  values: any\n) => {\n  return translatedName.reduce((prev, curr) => {\n    if (prev) {\n      return prev[curr]\n    }\n    return undefined\n  }, values)\n}\n","import React from \"react\"\nimport { SelectOption } from \"ts/FormInput/FormInputs_interface\"\nimport { InputNames } from \"ts/FormInput/FormInput_enum\"\nimport { assignClassName } from \"./assignClassName\"\nimport { modifyValue } from \"./modifyValue\"\n\nexport const assignElement = (props, input, values?, meta?) => {\n  const {\n    name,\n    label,\n    type,\n    placeholder,\n    options,\n    elements,\n    condition,\n    information,\n    plural\n  } = props\n  const className = assignClassName(name, values, meta)\n  switch (name) {\n    // TODO: Assign element by their specific type(not input type) not name to make it more re-usable and generic\n    case InputNames.DESCRIPTION:\n      // TODO: understand why function assignClassName in className had undefined for values\n      return (\n        <textarea {...input} placeholder={placeholder} className={className} />\n      )\n    case InputNames.CATEGORY_ID:\n      return (\n        <select\n          {...input}\n          placeholder={placeholder}\n          className={className}\n          value={values[name] || \"\"}\n        >\n          {placeholder && (\n            <option value=\"\" hidden>\n              {placeholder}\n            </option>\n          )}\n          {options.map((option: SelectOption) => {\n            return (\n              <option value={option.id} key={option.id} id={`${option.id}`}>\n                {option.name}\n              </option>\n            )\n          })}\n        </select>\n      )\n    case InputNames.COORDINATOR_ID:\n      const separateLoggedInUser = (options: SelectOption[], id: number): [SelectOption, SelectOption[]] => {\n        const user = options.find(option => option.id === id)\n        const restEntries = options.filter(option => option.id !== id)\n        return [user, restEntries]\n      }\n      const [userOption, restOption] = separateLoggedInUser(options, 3)\n      return (\n        <select {...input} className={className}>\n          <option value=\"\" disabled>\n            Me\n          </option>\n          <option value={userOption.id} key={userOption.id} id={`${userOption.id}`}> \n                {userOption.name} {userOption.lastname}\n              </option>\n          <option value=\"\" disabled>\n            Others\n          </option>\n          {restOption.map((option: SelectOption) => {\n            return (\n              <option value={option.id} key={option.id} id={`${option.id}`}>\n                {option.name} {option.lastname}\n              </option>\n            )\n          })}\n        </select>\n      )\n    case InputNames.PAID_EVENT:\n      return elements.map((element, index) => {\n        return (\n          <React.Fragment key={index}>\n            <input\n              {...input}\n              type={element.type}\n              name={element.name}\n              value={element.value}\n              checked={element.value === values[name]}\n              className={className}\n            />\n            {element.information && (\n              <span className=\"FormInput-description\">\n                {element.information}\n              </span>\n            )}\n          </React.Fragment>\n        )\n      })\n    case InputNames.DURATION:\n    case InputNames.REWARD:\n      const modifiedValue = modifyValue(name, input.value)\n      return (\n        <>\n          <input\n            {...input}\n            type={type}\n            name={name}\n            label={label}\n            // condition to avoid showing 0 instead of placeholder\n            value={input.value ? modifiedValue : input.value}\n            placeholder={placeholder}\n            className={className}\n          />\n          {information && (\n            <span className=\"FormInput-description FormInput-description--bigGap\">\n              {information}{(modifiedValue > 9 && plural) && \"s\"}\n            </span>\n          )}\n        </>\n      )\n    case InputNames.EVENT_FEE:\n      if (values[condition]) {\n        return (\n          <input\n          {...input}\n            type={type}\n            placeholder={placeholder}\n            className={className}\n          />\n        )\n      }\n      return\n    default:\n      return (\n        <input\n          {...input}\n          type={type}\n          placeholder={placeholder}\n          className={className}\n        />\n      )\n  }\n}\n","import { InputNames } from \"ts/FormInput/FormInput_enum\"\n\nexport const modifyValue = (name: InputNames, value: any) => {\n  switch (name) {\n    case InputNames.DURATION:\n      return (isNaN(value) || value === \"\") ? value : value / (60 * 60)\n    default:\n      return value\n  }\n}\n\nexport const omitNill = (values) => {\n  const newValues = values\n  for (var key in newValues) {\n    if (newValues[key] === null || newValues[key] === \"\") {\n      delete newValues[key]\n    }\n  }\n  return newValues\n}","import { InputNames } from \"ts/FormInput/FormInput_enum\"\n\nexport const parseInput = (value: any, name: InputNames | string) => {\n  switch (name) {\n    case InputNames.EVENT_FEE:\n    case InputNames.CATEGORY_ID:\n    case InputNames.REWARD:\n      if (value && value !== \"\") {\n        return isNaN(value) ? value : parseFloat(value)\n      } else {\n        return value\n      }\n      \n    case InputNames.PAID_EVENT:\n      return value === \"true\"\n    case InputNames.DURATION:\n        if (value && value !== \"\") {\n          return isNaN(value) ? value : parseFloat(value) * 60 * 60\n        } else {\n          return value\n        }\n    default:\n      return value\n  }\n}\n","import { assignElement } from \"helpers/components/MainForm/assignElement\"\nimport { assignValidators } from \"helpers/components/MainForm/assignValidator\"\nimport { composeValidators } from \"helpers/components/MainForm/formValidators\"\nimport { generateExtraFields } from \"helpers/components/MainForm/generateExtraFields\"\nimport { parseInput } from \"helpers/components/MainForm/inputParser\"\nimport React, { ReactElement } from \"react\"\nimport { Field } from \"react-final-form\"\nimport { FormInputProps } from \"ts/FormInput/FormInputs_interface\"\nimport \"./FormInput.scss\"\n\nconst FormInput = ({ ...props }: FormInputProps): ReactElement => {\n  const {\n    name,\n    label,\n    type,\n    values,\n    description,\n    counter,\n    maxLength,\n    condition,\n    required,\n    multiElement,\n    multiFields,\n    form,\n    defaultValue,\n  } = props\n\n  if (condition && !values[condition]) {\n    return null\n  } else {\n    return (\n      <Field\n        name={name}\n        validate={composeValidators(...assignValidators(name, values))}\n        parse={parseInput}\n        type={type}\n        defaultValue={defaultValue}\n        key={\"Field\" + name}\n      >\n        {({ input, meta }) => {\n          const inputToRender = assignElement(props, input, values, meta)\n          const extraFields = multiFields\n            ? generateExtraFields(multiFields, values, form)\n            : []\n\n          return (\n            <div className=\"FormInput\">\n              {label && (\n                <label className=\"FormInput--firstColumn FormInput-label\">\n                  {label}\n                  {required && (\n                    <span className=\"FormInput--required\">&nbsp;*</span>\n                  )}\n                </label>\n              )}\n              <div className=\"FormInput--secondColumn\">\n                <div\n                  className={multiElement ? \"FormInput-multiElementRow\" : \"\"}\n                >\n                  {inputToRender}\n                  {multiElement && multiFields && extraFields}\n                </div>\n\n                {description && inputToRender && (\n                  <div className=\"FormInput-descriptionRow\">\n                    <span> {description} </span>\n                    {counter && maxLength && (\n                      <span>\n                        {input.value.length} / {maxLength}\n                      </span>\n                    )}\n                  </div>\n                )}\n              </div>\n              {meta.error && meta.touched && (\n                <div className=\"FormInput--thirdColumn\">\n                  <div className=\"FormInput-error FormInput-error--arrow\">\n                    {meta.error}\n                  </div>\n                </div>\n              )}\n            </div>\n          )\n        }}\n      </Field>\n    )\n  }\n}\n\nexport default FormInput\n","import React, { useEffect } from \"react\"\nimport { Field } from \"react-final-form\"\nimport { FormInputProps } from \"ts/FormInput/FormInputs_interface\"\nimport { assignElement } from \"./assignElement\"\nimport { assignValidators } from \"./assignValidator\"\nimport { composeValidators } from \"./formValidators\"\nimport { parseInput } from \"./inputParser\"\nimport { FormValues } from \"ts/Form/Form_interfaces\"\n\nexport const generateExtraFields = (\n  multiFields: FormInputProps[],\n  values?: FormValues,\n  form?\n): any => {\n  return multiFields.map(fieldProps => {\n    const { name, type, condition } = fieldProps\n\n    useEffect(() => {\n      return () => {\n        if (condition && !values[condition]) {\n          // clear the value after input unmounts, meaning user doesn't want to set the value\n          values[name] && form.change(name, null)\n        }\n      }\n    })\n    if (condition && !values[condition]) {\n      return null\n    }\n    return (\n      <Field\n        name={name}\n        validate={composeValidators(...assignValidators(name, values))}\n        parse={parseInput}\n        type={type}\n        key={\"Field\" + name}\n      >\n        {({ input, meta }) => {\n          const inputToRender = assignElement(fieldProps, input, values)\n          return (\n            <div className=\"FormInput--inlineError\">\n              {inputToRender}\n              {meta.error && meta.touched && (\n                <div className=\"FormInput--thirdColumn\">\n                  <div className=\"FormInput-error FormInput-error--arrow\">\n                    {meta.error}\n                  </div>\n                </div>\n              )}\n            </div>\n          )\n        }}\n      </Field>\n    )\n  })\n}\n","import { assignValidators } from \"helpers/components/MainForm/assignValidator\"\nimport { composeValidators } from \"helpers/components/MainForm/formValidators\"\nimport { omitNill } from \"helpers/components/MainForm/modifyValue\"\nimport React, { useState } from \"react\"\nimport { Field, Form } from \"react-final-form\"\nimport { InputNames, InputTypes } from \"ts/FormInput/FormInput_enum\"\nimport * as inputsSchema from \"../../data/FormSchema/inputs.json\"\nimport FormBlock from \"./FormBlock/FormBlock\"\nimport { DateComponent } from \"./FormInput/DateComponent/DateComponent\"\nimport FormInput from \"./FormInput/FormInput\"\nimport \"./MainForm.scss\"\nimport { FormValues } from \"ts/Form/Form_interfaces.js\"\n\nconst MainForm = () => {\n  const onSubmit = (values: FormValues) => {\n    const valuesOmitNil = omitNill(values)\n    console.log(valuesOmitNil)\n    setSubmitted(true)\n  }\n\n  const [submitted, setSubmitted] = useState<boolean>(false)\n\n  if (submitted) {\n    return (\n      <FormBlock title=\"Success\" className=\"App-content--middle FormBlock--success\" >\n        <span className=\"FormBlock-description\">Event has been created. </span>\n      </FormBlock>\n    )\n  }\n\n  return (\n    <div className=\"MainForm App-content--middle\">\n      <Form\n        mutators={{\n          resetFee: (args, state, utils) => {\n            utils.changeValue(state, InputNames.EVENT_FEE, () => \"\")\n          }\n        }}\n        onSubmit={onSubmit}\n        render={({ handleSubmit, form, submitting, pristine, values }) => (\n          <form onSubmit={handleSubmit} className=\"MainForm-form\">\n            <FormBlock title={\"About\"}>\n              {inputsSchema.about.map(input => (\n                <FormInput\n                  key={input.name}\n                  name={input.name as InputNames}\n                  label={input.label}\n                  type={input.type as InputTypes}\n                  placeholder={input.placeholder}\n                  description={input.description}\n                  counter={input.counter}\n                  maxLength={input.maxLength}\n                  options={input.options}\n                  elements={input.elements}\n                  values={values as FormValues}\n                  required={input.required}\n                  multiElement={input.multiElement}\n                  information={input.information}\n                  multiFields={input.multiFields}\n                  form={form}\n                />\n              ))}\n            </FormBlock>\n            <FormBlock title={\"Coordinator\"}>\n              {inputsSchema.coordinator.map(input => (\n                <FormInput\n                  key={input.name}\n                  name={input.name as InputNames}\n                  type={input.type as InputTypes}\n                  label={input.label}\n                  placeholder={input.placeholder}\n                  options={input.options}\n                  values={values as FormValues}\n                  defaultValue={input.defaultValue}\n                  required={input.required}\n                />\n              ))}\n            </FormBlock>\n            <FormBlock title={\"When\"}>\n              <Field\n                key={\"date\"}\n                name={InputNames.DATE}\n                label=\"Starts on \"\n                component={DateComponent}\n                form={form}\n                validate={composeValidators(\n                  ...assignValidators(InputNames.DATE, values)\n                )}\n              />\n              {inputsSchema.when.map(input => (\n                <FormInput\n                  key={input.name}\n                  name={input.name as InputNames}\n                  type={input.type as InputTypes}\n                  label={input.label}\n                  placeholder={input.placeholder}\n                  values={values as FormValues}\n                  multiElement={input.multiElement}\n                  information={input.information}\n                  plural={input.plural}\n                />\n              ))}\n            </FormBlock>\n            <div className=\"MainForm-buttonContainer\">\n              <button\n                type=\"submit\"\n                disabled={submitting}\n                className=\"MainForm-button MainForm-button--submit\"\n              >\n                Publish Event\n              </button>\n              <button\n                type=\"reset\"\n                onClick={form.reset}\n                disabled={submitting || pristine}\n                className=\"MainForm-button MainForm-button--reset\"\n              >\n                Reset\n              </button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  )\n}\n\nexport default MainForm\n","import React from \"react\"\nimport \"./Header.scss\"\n\nconst Header = () => {\n  return (\n    <header className=\"Header App-content--entireRow\">\n      <div className=\"Header-Stripe\" />\n      <div className=\"Header-Title\">\n        <span className=\"Header-Title--text\"> New event</span>\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport \"./App.scss\"\nimport MainForm from \"../MainForm/MainForm\"\nimport Header from \"components/Header/Header\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App App-content\">\n      <Header />\n      <MainForm />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./components/App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}